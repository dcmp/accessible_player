// Generated by CoffeeScript 1.4.0
(function() {
  var $, AccessiblePlayer, jQueryPlugIn,
    __slice = [].slice,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $ = jQuery;

  jQueryPlugIn = (function() {

    jQueryPlugIn.defaultOptions = {};

    function jQueryPlugIn(element, options) {
      this.element = element;
      this.initialize(options);
    }

    jQueryPlugIn.prototype.initialize = function(options) {
      this.options = options;
    };

    jQueryPlugIn.prototype.execute_method = function() {
      var args, method;
      method = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    };

    jQueryPlugIn.installAsjQueryPlugIn = function(pluginName) {
      var pluginClass;
      if (pluginName == null) {
        pluginName = this.name;
      }
      pluginClass = this;
      return $.fn[pluginName] = function() {
        var args, options;
        options = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        if ($.type(options) === "object") {
          options = $.extend(pluginClass.defaultOptions, options || {});
        }
        return this.each(function() {
          var $this, instance, plugin;
          $this = $(this);
          instance = $this.data(pluginName);
          if (instance != null) {
            if ($.type(options) === "string") {
              return instance.execute_method.apply(instance, [options].concat(__slice.call(args)));
            } else if (instance.initialize != null) {
              return instance.initialize.apply(instance, [options].concat(args));
            }
          } else {
            plugin = (function(func, args, ctor) {
              ctor.prototype = func.prototype;
              var child = new ctor, result = func.apply(child, args);
              return Object(result) === result ? result : child;
            })(pluginClass, [$this, options].concat(__slice.call(args)), function(){});
            $this.data(pluginName, plugin);
            $this.addClass(pluginName);
            $this.bind("destroyed." + pluginName, function() {
              $this.removeData(pluginName);
              $this.removeClass(pluginName);
              $this.unbind(pluginName);
              return plugin.destructor();
            });
            return plugin;
          }
        });
      };
    };

    return jQueryPlugIn;

  })();

  window.__DCMP_EMBED_COUNTER = 0;

  AccessiblePlayer = (function(_super) {

    __extends(AccessiblePlayer, _super);

    AccessiblePlayer.defaultOptions = {
      movie: null,
      captions: {
        file: null,
        back: true,
        fontsize: 14,
        color: "#fffff"
      },
      buttons: {
        play_class: "ap-play-button",
        stop_class: "ap-stop-button",
        volume_up_class: "ap-volume-up-button",
        volume_down_class: "ap-volume-down-button",
        mute_class: "ap-mute-button",
        skip_ahead_class: "ap-skip-ahead-button",
        skip_back_class: "ap-skip-back-button",
        caption_class: "ap-caption-button"
      },
      width: 650
    };

    function AccessiblePlayer(element, options) {
      this.element = element;
      this.setup_event_listeners = __bind(this.setup_event_listeners, this);

      this.render_player = __bind(this.render_player, this);

      this.render_ui_elements = __bind(this.render_ui_elements, this);

      this.methods = this.player_id = 0;
      this.element.html("");
      AccessiblePlayer.__super__.constructor.call(this, this.element, options);
    }

    AccessiblePlayer.prototype.initialize = function(options) {
      this.options = options;
      AccessiblePlayer.__super__.initialize.call(this, this.options);
      this.player_id = window.__DCMP_EMBED_COUNTER++;
      this.player_element = "__dcmp_ap_" + this.player_id;
      this.render_ui_elements();
      this.render_player();
      return this.setup_event_listeners();
    };

    AccessiblePlayer.prototype.render_ui_elements = function() {
      var template;
      template = "<div class=\"ap-video-wrapper\">\n	<div class=\"ap-video-controls\">\n		<ul>\n			<li><a aria-role=\"button\" class=\"ap-control-button " + this.options.buttons.play_class + "\">Play/Pause</a></li>\n			<li><a aria-role=\"button\" class=\"ap-control-button " + this.options.buttons.stop_class + "\">Stop and Rewind</a></li>\n			<li><a aria-role=\"button\" class=\"ap-control-button " + this.options.buttons.volume_up_class + "\">Volume Up</a></li>\n			<li><a aria-role=\"button\" class=\"ap-control-button " + this.options.buttons.volume_down_class + "\">Volume Down</a></li>\n			<li><a aria-role=\"button\" class=\"ap-control-button " + this.options.buttons.mute_class + "\">Mute</a></li>\n			<li><a aria-role=\"button\" class=\"ap-control-button " + this.options.buttons.skip_ahead_class + "\">Ahead 5 Seconds</a></li>\n			<li><a aria-role=\"button\" class=\"ap-control-button " + this.options.buttons.skip_back_class + "\">Back 5 Seconds</a></li>							\n			<li><a aria-role=\"button\" class=\"ap-control-button " + this.options.buttons.caption_class + "\">Toggle Captions</a></li>							\n		</ul>\n	</div>\n	<div class=\"ap-video-player\" aria-hidden=\"true\">\n		<div class=\"ap-media-item\" id=\"" + this.player_element + "\">Loading....</div>\n	</div>\n</div>";
      console.log(this.element);
      return this.element.html(template);
    };

    AccessiblePlayer.prototype.render_player = function() {
      var player_options, wrapper;
      wrapper = this.element.find(".ap-video-player");
      player_options = {
        file: this.options.movie,
        tracks: [
          {
            file: this.options.captions.file,
            kind: "captions",
            "default": true
          }
        ],
        captions: {
          back: this.options.captions.back,
          color: this.options.captions.color,
          fontsize: this.options.captions.fontsize
        }
      };
      console.log(this.options);
      if (this.options.width && this.options.width !== "auto") {
        player_options.width = this.options.width;
      } else {
        player_options.height = this.element.find(".ap-video-controls").height() - 4;
      }
      console.log("player options: ", player_options);
      return jwplayer(this.player_element).setup(player_options);
    };

    AccessiblePlayer.prototype.setup_event_listeners = function() {
      var player,
        _this = this;
      player = this.player_element;
      $("#" + (this.element.prop("id")) + " ." + this.options.buttons.play_class).click(function(evt) {
        if (jwplayer(player).getState() === "PLAYING") {
          return jwplayer(player).pause();
        } else {
          return jwplayer(player).play();
        }
      });
      $("#" + (this.element.prop("id")) + " ." + this.options.buttons.stop_class).click(function(evt) {
        return jwplayer(player).stop();
      });
      $("#" + (this.element.prop("id")) + " ." + this.options.buttons.volume_up_class).click(function(evt) {
        return jwplayer(player).setVolume(jwplayer(player).getVolume() + 10);
      });
      $("#" + (this.element.prop("id")) + " ." + this.options.buttons.volume_down_class).click(function(evt) {
        return jwplayer(player).setVolume(jwplayer(player).getVolume() - 10);
      });
      $("#" + (this.element.prop("id")) + " ." + this.options.buttons.mute_class).click(function(evt) {
        return jwplayer(player).setMute(!jwplayer(player).getMute());
      });
      $("#" + (this.element.prop("id")) + " ." + this.options.buttons.skip_ahead_class).click(function(evt) {
        return jwplayer(player).seek(jwplayer(player).getPosition() + 5);
      });
      $("#" + (this.element.prop("id")) + " ." + this.options.buttons.skip_back_class).click(function(evt) {
        return jwplayer(player).seek(jwplayer(player).getPosition() - 5);
      });
      return $("#" + (this.element.prop("id")) + " ." + this.options.buttons.caption_class).click(function(evt) {
        var current_track;
        current_track = jwplayer(player).getCurrentCaptions();
        if (current_track === 0) {
          return jwplayer(player).setCurrentCaptions(1);
        } else {
          return jwplayer(player).setCurrentCaptions(0);
        }
      });
    };

    return AccessiblePlayer;

  })(jQueryPlugIn);

  AccessiblePlayer.installAsjQueryPlugIn("accessible_player");

}).call(this);
